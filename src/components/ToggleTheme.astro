---
---

<label class="inline-flex items-center gap-2">
  <span
    class="text-xs leading-tight tracking-tighter text-neutral-700 dark:text-neutral-300"
    >ダークテーマ</span
  >
  <input type="checkbox" role="switch" id="toggle-theme" />
</label>

<style>
  label {
    cursor: pointer;
  }
  input {
    --size: 22px;
    appearance: none;
    outline: none;
    display: inline-block;
    height: var(--size);
    width: calc(var(--size) * 2);
    position: relative;
    cursor: pointer;
    border-radius: calc(var(--size) / 2);
    border: 1px solid #dfdfdf;
    --a-bg-color: rgb(224, 224, 224);
  }
  label:hover input {
    box-shadow: 0px 2px 14px 2px rgba(93, 132, 158, 0.5);
  }
  input:checked {
    --x: 20px;
    background-color: #0b51c1;
    --a-bg-color: rgb(230, 230, 230);
  }
  input::after {
    content: "";
    width: 18px;
    height: 18px;
    margin: 0;
    position: absolute;
    top: 1px;
    left: 2px;
    background-color: var(--a-bg-color);
    border-radius: 50%;
    transform: translateX(var(--x));
    border: 1px solid #bbbbbb;
    transition: transform cubic-bezier(0.2, 0.85, 0.32, 1.2) 0.5s;
  }
</style>

<script>
  const toggleTheme = document.getElementById(
    "toggle-theme"
  ) as HTMLInputElement;
  toggleTheme.checked = document.documentElement.classList.contains("dark");
  const userPreference = window.matchMedia("(prefers-color-scheme: dark)");

  const setTheme = (theme: "light" | "dark") => {
    document.documentElement.classList.remove(
      theme === "dark" ? "light" : "dark"
    );
    document.documentElement.classList.add(theme);
    localStorage.setItem("theme", theme);
  };

  toggleTheme.addEventListener("change", () => {
    setTheme(toggleTheme.checked ? "dark" : "light");
  });

  userPreference.addEventListener("change", () => {
    setTheme(userPreference.matches ? "dark" : "light");
    toggleTheme.checked = userPreference.matches;
  });
</script>
